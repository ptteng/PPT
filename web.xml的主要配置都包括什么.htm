
<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <title>葡萄藤PPT</title>

    <link rel="stylesheet" href="https://ptteng.github.io/PPT/css/reveal/reveal.css">

    <!-- PPT主题，可以在/css/reveal/theme/中选择其他主题，目前暂时只能使用该模板 -->
    <link rel="stylesheet" href="https://ptteng.github.io/PPT/css/reveal/theme/ptt.css">

    <!-- syntax highlighting 代码高亮主题 -->
    <link rel="stylesheet" href="https://ptteng.github.io/PPT/lib/reveal/css/zenburn.css">

    <!-- 打印和PDF输出样式 -->
    <script>
        var link = document.createElement( 'link' );
        link.rel = 'stylesheet';
        link.type = 'text/css';
        link.href = window.location.search.match( /print-pdf/gi ) ? 'https://ptteng.github.io/PPT/css/reveal/print/pdf.css' : '../css/reveal/print/paper.css';
        document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>
</head>
<body>
<img src="https://ptteng.github.io/PPT/img/demo/logo.png" alt="" usemap="#pttmap" class="base-logo">
<map name="pttmap">
    <area shape="rect" coords="0,0,276,58" href="http://www.jnshu.com" alt="" target="_blank"/>
</map>
<div class="reveal">
    <div class="slides">
        <section>
            <h2>web.xml里的主要配置都包括什么</h2>
			<h2>都代表什么含义</h2>
            <h3>java分享会</h3>
            <p>分享人：曹樾</p>
        </section>
        <section>
            <p>1.背景介绍</p>
            <p>2.知识剖析</p>
            <p>3.常见问题</p>
            <p>4.解决方案</p>
            <p>5.编码实战</p>
            <p>6.扩展思考</p>
            <p>7.参考文献</p>
            <p>8.更多讨论</p>
        </section>
        <section>
            <h3>1.背景介绍</h3>
        </section>
        <section>
            <p>先介绍下背景</p>
			<p>web.xml是什么？</p>
            <p>web.xml是网络程序中的一个配置文件</p>
        </section>
        <section>
			<p>web.xml文件的规则？</p>
            <p>有且只有一个根节点，大小写敏感，标签不嵌套，必须配对，同HTML</p>
        </section>
        <section>
            <p>web.xml文件的作用</p>
            <p>用来初始化配置信息</p>
            <p>比如servlet,servlet-mapping,filter,listener等</p>
            <p>假如web工程没用到这些，可以不用来web.xml来配置</p>	
        </section>
        <section>
            <p>web.xml文件的作用</p>
            <p>在web.xml的模式(Schema)文件中定义了多少种标签元素</p>
            <p>web.xml中就可以出现它的模式文件所定义的标签元素</p>
            <p>它就能拥有定义出来的那些功能。</p>	
        </section>
        <section>
            <h3>2.知识剖析</h3>
        </section>
            <section>
                <p>web.xml文件中的主要标签及其含义</p>
            </section>
			<section>
                <h3>1.指定欢迎页面</h3>
                <p>< welcome-file-list >< welcome-file>index.jsp< /welcome-file>< /welcome-file-list></p>
                <p>还可以继续添加欢迎页面显示顺序从第一个找</p>
                <p>第一个找不到就找第二个</p>
            </section>
            <section>
                <h3>2.命名与定制URL</h3>
                <p>(1)为servlet命名</p>
                <p>(2)为servlet定制URL</p>
            </section>
            <section>
                <h3>3.定制初始化参数</h3>
                <p>可以定制servlet、JSP、Context的初始化参数，然后可以再servlet、JSP、Context中获取这些参数值</p>
            </section>
            <section>
                <h3>4.指定错误处理页面</h3>
                <p>可以通过“异常类型”或“错误码”来指定错误处理页面</p>
            </section>
            <section>
                <h3>5.设置过滤器</h3>
                <p>比如设置一个编码过滤器，过滤所有资源</p>
                <p>Servlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，</p>
                <p>主要的用途是过滤字符编码、做一些业务逻辑判断等。</p>
            </section>
            <section>
                    <p>其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，</p>
                    <p>它都会帮你拦截到请求，此时你就可以对请求或响应(Request、Response)统一设置编码，简化操作；</p>
                    <p>同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等工作。</p>
                    <p>它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。</p>
            </section>
            <section>
                <h3>6.设置监听器</h3>
                <p>Servlet的监听器Listener，</p>
                <p>它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，</p>
                <p>它也是随web应用的启动而启动，只初始化一次，随web应用的停止而销毁。</p>
            </section>
            <section>
                <p>主要作用是： 做一些初始化的内容添加工作、设置一些基本的内容、</p>
                <p>比如一些参数或者是一些固定的对象等等。</p>
            </section>
        </section>
         <section>
            <h3>3.常见问题</h3>
        </section>
        <section>
            <p>web.xml 文件中一般包括 servlet, spring, filter, listener的配置。</p>
            <p>那么他们是按照一个什么顺序加载呢？</p>
        </section>
        <section>
            <h3>4.解决方案</h3>
        </section> <section>
			<p> 加载顺序为： listener >> filter >> servlet >> spring<p> 
            <p>加载顺序会影响对spring bean 的调用。</p>
            <p>比如filter 需要用到 bean ，但是加载顺序是 先加载filter 后加载spring，则filter中初始化操作中的bean为null；</p>
            <p>但加载顺序与他们在web.xml文件中的先后顺序无关。</p>		
		</section>
        
        <section>
            <h3>5.编码实战</h3>
	
        </section>
        
        <section>
            <h3>6.扩展思考</h3>
			<p>其中/和/*的区别</p>
        </section>
        <section>
            <p>< url-pattern > /   不会匹配到*.jsp，</p>
            <p>即：*.jsp不会进入spring的 DispatcherServlet类</p>
            <p>< url-pattern > /*会匹配*.jsp，</p>
            <p>会出现返回jsp视图时再次进入spring的DispatcherServlet类</p>
            <p>导致找不到对应的controller所以报404错。</p>
        </section>
        
        <section>
            <h3>7.参考文献</h3>
            <p>好叶叶孤城的博客——web.xml有什么用</p>
            <p>百度</p>
        </section>
        <section>
            <h3>8.更多讨论</h3>
        </section>
        <section>
            <h4>鸣谢</h4>
            <p>感谢观看,如有出错,恳请指正</p>
            <p><small>BY : 曹樾</small></p>
        </section>

    </div>
</div>

<script src="https://ptteng.github.io/PPT/lib/reveal/js/head.min.js"></script>
<script src="https://ptteng.github.io/PPT/lib/reveal/reveal.js"></script>

<script>

    // 以下为常见配置属性的默认值
    // {
    // 	controls: true, // 是否在右下角展示控制条
    // 	progress: true, // 是否显示演示的进度条
    // 	slideNumber: false, // 是否显示当前幻灯片的页数编号，也可以使用代码slideNumber: 'c / t' ，表示当前页/总页数。
    // 	history: false, // 是否将每个幻灯片改变加入到浏览器的历史记录中去
    // 	keyboard: true, // 是否启用键盘快捷键来导航
    // 	overview: true, // 是否启用幻灯片的概览模式，可使用"Esc"或"o"键来切换概览模式
    // 	center: true, // 是否将幻灯片垂直居中
    // 	touch: true, // 是否在触屏设备上启用触摸滑动切换
    // 	loop: false, // 是否循环演示
    // 	rtl: false, // 是否将演示的方向变成RTL，即从右往左
    // 	fragments: true, // 全局开启和关闭碎片。
    // 	autoSlide: 0, // 两个幻灯片之间自动切换的时间间隔（毫秒），当设置成 0 的时候则禁止自动切换，该值可以被幻灯片上的 ` data-autoslide` 属性覆盖
    // 	transition: 'default', // 切换过渡效果，有none/fade/slide/convex/concave/zoom
    // 	transitionSpeed: 'default', // 过渡速度，default/fast/slow
    // 	mouseWheel: true, //是否启用通过鼠标滚轮来切换幻灯片
    // }

    // 初始化幻灯片
    Reveal.initialize({
        history: true,
        dependencies: [
            { src: 'https://ptteng.github.io/PPT/plugin/markdown/marked.js' },
            { src: 'https://ptteng.github.io/PPT/plugin/markdown/markdown.js' },
            { src: 'https://ptteng.github.io/PPT/plugin/notes/notes.js', async: true },
            { src: 'https://ptteng.github.io/PPT/plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }
        ]
    });
</script>
</body>
</html>